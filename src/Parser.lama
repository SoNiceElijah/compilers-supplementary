-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (m) {
  [s (m), fun (l, o, r) { Binop (o, l, r) }]
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta (expr ({
          [ Left, map (binop, { "!!" }) ]
        , [ Left, map (binop, { "&&" }) ]
        , [ Nona, map (binop, { "<", ">", "<=", ">=", "!=", "==" }) ]
        , [ Left, map (binop, { "+", "-" }) ]
        , [ Left, map (binop, { "*", "/", "%" }) ]
      }, primary));

var stmt = memo $ eta expr (
  {[ Left, {[ s (";"), fun (l, o, r) { Seq (l, r) } ]} ]},
  syntax (
      kSkip { Skip }
    | x=lident s [":="] e=exp { Assn (x, e) }
    | kRead s ["("] x=lident s [")"] { Read (x) }
    | kWrite s ["("] e=exp s [")"] { Write (e) }
  )
);
   

-- Public top-level parser
public parse = stmt;
             
