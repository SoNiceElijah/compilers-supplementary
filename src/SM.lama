-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;
import Array;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[st, s, w], insns) {
  
  var arr = listArray(insns);
  var i = 0;

  var stack = st;
  var state = s;
  var world = w;

  for skip, i < arr.length, i := i + 1 do
    case arr[i] of
      READ -> 
        case readWorld(world) of
          [value, newWorld] ->
            stack := value:stack;
            world := newWorld
        esac
    | WRITE -> 
        case stack of
          value:rest -> 
            world := writeWorld (value, world);
            stack := rest
        esac
    | BINOP (op) -> 
        case stack of
          r:l:rest ->
            var x = case op of
              "+" -> l + r
            | "-" -> l - r
            | "*" -> l * r
            | "/" -> l / r
            | "%" -> l % r
            | "<" -> l < r
            | "<=" -> l <= r
            | ">" -> l > r
            | ">=" -> l >= r
            | "==" -> l == r
            | "!=" -> l != r
            | "&&" -> l && r
            | "!!" -> l !! r
            esac;
            stack := x:rest
        esac
    | LD (x) -> stack := state (x) : stack
    | ST (x) -> 
        case stack of
          value:rest -> 
            state := state <- [x, value];
            stack := rest
        esac
    | CONST (n) -> stack := n:stack
    esac
  od;

  [stack, state, world]
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (s) -> { LD (s) }
  | Const (x) -> { CONST (x) }
  | Binop (op, l, r) -> compileExpr (l) +++ compileExpr(r) +++ { BINOP (op) }
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (name, expr) -> compileExpr(expr) +++ { ST (name) }
  | Seq (s1, s2) -> compileSM (s1) +++ compileSM (s2)
  | Skip -> {}
  | Read (name) -> { READ } +++ { ST (name) } -- { READ, ST (name) }
  | Write (expr) -> compileExpr (expr) +++ { WRITE }
  esac
}
