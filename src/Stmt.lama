-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)


fun eval (c@[s, w], stmt) {
  case stmt of
    Assn (name, expr) -> [s <- [name, evalExpr (s, expr)], w]
  | Seq (s1, s2) -> eval (eval (c, s1), s2)
  | Skip -> c
  | Read (name) -> 
      case readWorld (w) of 
        [v, nw] -> [s <- [name, v], nw]
      esac
  | Write (expr) -> [s, writeWorld (evalExpr (s, expr), w)]
  | If (cond, tru, fls) ->
      if evalExpr (s, cond) 
        then eval (c, tru)
        else eval (c, fls)
      fi
  | While (cond, body) -> 
      if evalExpr (s, cond)
        then eval (eval (c, body), stmt)
        else c
      fi
  | DoWhile (body, cond) ->
      case eval (c, body) of
       [v, nw] -> 
        if evalExpr (v, cond)
          then eval ([v, nw], stmt)
          else [v, nw]
        fi
      esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
